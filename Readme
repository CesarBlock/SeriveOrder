# Order Service Management

## Contexto da Aplicação

O **Order Service Management** é uma aplicação desenvolvida em Java utilizando o framework Spring Boot. Seu objetivo é gerenciar ordens de serviço e serviços associados, permitindo o cadastro, edição, exclusão e visualização de ordens de serviço e serviços. A aplicação utiliza o PostgreSQL como banco de dados e o Thymeleaf como mecanismo de template para renderizar as páginas HTML.

## Funcionalidades

- Cadastro de ordens de serviço com informações como cliente, status e serviços associados.
- Gerenciamento de serviços, incluindo nome, descrição, preço e horas estimadas.
- Listagem de ordens de serviço e serviços cadastrados.
- Edição e exclusão de ordens de serviço e serviços.

---

## 1. Execução Manual da Aplicação

### Pré-requisitos

1. **Java 21**: Certifique-se de que o Java 21 está instalado na sua máquina.
   - Para verificar a versão instalada:
     ```bash
     java -version
     ```
   - Caso não esteja instalado, faça o download em: [https://jdk.java.net/21/](https://jdk.java.net/21/).

2. **Maven**: Certifique-se de que o Maven está instalado.
   - Para verificar a versão instalada:
     ```bash
     mvn -version
     ```
   - Caso não esteja instalado, faça o download em: [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi).

3. **PostgreSQL**: Instale o PostgreSQL e configure um banco de dados manualmente.
4. **application.properties**: Certifique que o arquivo conterá as informações corretas da sua base de dados. Ex:
    - spring.datasource.url=jdbc:postgresql://localhost:5432/orderServiceManagement
    - spring.datasource.username=postgres
    - spring.datasource.password=postgres
    - spring.jpa.hibernate.ddl-auto=update

### Execução da aplicação
**Pasta**: Acesse a pasta raíz do projeto corretamente
**Compilação e execução**: Rode o comando para gerar o arquivo .jar 
    - mvn clean package -DskipTests
    Execute o arquivo gerado:
    - java -jar target/Order-Serivce-management-0.0.1-SNAPSHOT.jar
    Acesse a aplicação na porta configurada (por padrão, 8080)
    - http://localhost:8080/

---

## 2. Execução com Docker

### Pré-requisitos

1. **Docker**: Certifique-se de que o Docker está instalado.
   - Para verificar a instalação:
     ```bash
     docker --version
     ```
   - Caso não esteja instalado, faça o download em: [https://www.docker.com/](https://www.docker.com/).

2. **Docker Compose**: Certifique-se de que o Docker Compose está instalado.
   - Para verificar a instalação:
     ```bash
     docker-compose --version
     ```

### Execução com Docker Compose

1. **Acesse o diretório do projeto**:
   Navegue até a pasta raiz do projeto onde o arquivo `docker-compose.yml` está localizado:
   Construa e inicie os containers: docker compose up --build
   **Observação**: Caso já possua o postgress instalado localmente, certifique de desativalo antes de iniciar o docker compose, ou realizar a alteração da numeração da porta
    Acesse a aplicação na porta configurada (por padrão, 8080)
    - http://localhost:8080/
